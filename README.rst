****
Micc
****

This is work in progress!

.. image:: https://img.shields.io/pypi/v/micc.svg
        :target: https://pypi.python.org/pypi/micc

.. image:: https://img.shields.io/travis/etijskens/micc.svg
        :target: https://travis-ci.org/etijskens/micc

.. image:: https://readthedocs.org/projects/micc/badge/?version=latest
        :target: https://micc.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status


`Micc <https://github.com/etijskens/et-micc>`_ is a Python project manager: it helps 
you organize your Python project from simple single file modules to fully fledged 
Python packages containing modules, submodules, apps and binary extension modules 
written in Fortran or C++. Micc_ is opinionated. It organizes your project in a 
way that is considered best practice by a large part of the Python community.

Micc_ helps you

* create new projects. You can start small with a simple one-file package and add 
  material as you go, such as
  
  * python sub-modules 
  * applications, also known as command line interfaces. 
  * binary extension modules written in C++ and Fortran. Boiler plate code is 
    automatically added as to build these binary extension with having to go through
    al the details.
  * Micc_ adds typically files containing example code to show you how to add your
    own functionality.
    
* Micc_ can automatically extract documentation from the doc-strings of your files, 
  and build html documentation that you can consult in your browser, or a .pdf 
  documentation file.
* Micc_ helps you with version management and control.   
* Micc_ helps you with testing your code.
* Micc_ helps you with publishing your code to e.g. `PyPI <https://pypi.org>`_, so
  that you colleagues can use your code by simply running `pip install your_nifty_package`.
  with a little extra effort the html documentation that is generated by micc_ is
  automatically published to `readthedocs <https://readthedocs.org>`_.
  
Micc_ does not do al of this by itself. For many things it relies on other strong 
open source tools and it is therefor open source as well. Here is a list of tools 
micc_ is using or cooperating with happily:

* `Poetry <https://github.com/sdispater/poetry>`_: dependency management, virtual 
  environments.
* `Pyenv <https://github.com/pyenv/pyenv>`_: management of different Python versions
* `Pipx <https://github.com/pipxproject/pipx/>`_: installation of CLIs in a system-wide  
  way.
* `Cookiecutter <https://github.com/audreyr/cookiecutter>`_ for creating templates for 
  all the things that can be added to your project.
* `Sphinx <http://www.sphinx-doc.org/>`_: building of documentation.
* `git <https://www.git-scm.com/>`_: version control.
* `python-semanticversion <https://github.com/rbarrois/python-semanticversion/blob/master/docs/index.rst>`_:
  management of version string according to `Semver 2.0 <http://semver.org/>`_.
* `pytest <https://www.git-scm.com/>`_: testing your code.

Roadmap
=======
These feature still on our wishlist:

* Contininous integtration (CI)
.. 
